<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

    <modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>org.joolzminer</groupId>
		<artifactId>desktop-ui</artifactId>
		<version>1.0-SNAPSHOT</version>
	</parent>

    <artifactId>002-desktop-ui-techniques</artifactId>

    <packaging>jar</packaging>

    <name>|-- 002-desktop-ui-techniques</name>
	<description>		
		Keywords:
			+ Layout
			+ MenuBar, MenuItem

		This project includes very simple examples involving Desktop UI.
			
		BorderLayoutTestRunner:
			Demonstrates how to use the BorderLayout in a JFrame. A couple of
			components (a button and a texfield are placed in the east and west).
			
		FlowLayoutTestRunner:
			Demonstrates how to use the FlowLayout in a JFrame. A couple of text areas
			are added to the frame.
			
		BoxLayoutTestRunner:
			Demonstrates how to use the BoxLayout in a JFrame to layout the components
			in a top to bottom fashion.
		
		GridLayoutTestRunner:
			Demonstrates how to use the GridLayout in a JFrame to layout the components
			in a grid.
		
		NoLayoutTestRunner:
			Demonstrates how to use absolute positioning in a Swing application by not
			selecting any layout manager.
			
		GroupLayoutTestRunner:
			Demonstrates how to use the GroupLayout layout to create a Find frame.
		
		JMenuTestRunner:
			Demonstrates how to add a MenuBar and menu items to a JFrame.
			
		LookAndFeelTestRunner:
			Demonstrates how to select a Look And Feel in your Swing application.
		
		ActionListenerTestRunner:
			Demonstrates how to implement an ActionListener in an application with a
			JFrame and a JButton. When the JButton is clicked, a MessageDialog is
			opened with the name of the button that has been clicked.
		
		ActionListenerAnonymousTestRunner:
			Another example of ActionListener implementation. This time, the listener
			is implemented as an anonymous inner class. A JFrame is created with a
			button that once clicked, forces the display of an open file dialog.
		
		ActionEventRadioButtonTestRunner:
			Another example of ActionListener implementation. This time, three radio
			buttons are created and put in a ButtonGroup. The listener is created as
			an static inner class.
		
		ActionEventRadioButtonTestRunner:
			A variant of ActionEventRadioButtonTestRunner in which the listener is
			implemented as a nested class. When a radio button is clicked, the title
			of the frame is changed.
		
		MouseEventListener:
			Demonstrates how to implement a MouseListener by extending the 
			MouseAdapter class and overriding the mouseClicked() method. When any
			of the mouse buttons are clicked on the JFrame a message is printed on the
			console.
			
		KeyListenerTestRunner:
			Demonstrates how to implement a KeyListener. The class extends a JFrame and
			also implements the KeyListener interface. The frame includes a textfield
			and when the user types on it everything is turned into uppercase.
			
		WindowListenerTestRunner:
			Demonstrate how to implement a WindowListener. The class extends a JFrame
			and handles the windowIconifies event by extending a WindowAdapter. The app
			prevents the window to be iconified by setting its state back to normal.
			
		SplashScreenDemo:
			Demonstrates how to implement a Splash Screen. The application must be run
			from the command line using: 
				java -splash:splash.jpg org.joolzminer.examples.SplashScreenDemo
			I haven't modified the POM to add extra parameters to the manifest, so to
			see the splash screen you should open a command window on generated classes
			and run the command from there.
		
		SystemTrayDemo:
			Demonstrates how to implement an application that registers in the system
			tray with an icon, a tooltip and a popup menu.
			
		DesktopDemo:
			Demonstrates how to use the Desktop class to invoke the OS registered
			applications to open, edit, print, open URL and mail.
			It also includes an exit option that displays a confirmation dialog and the
			close button also displays that confirmation.
			If an error occurs, a message dialog is displayed.
	</description>
</project>

